name: CD - AI Broker

on:
  push:
    branches:
      - main
    paths:
      - 'services/ai-broker/**'
      - '.github/workflows/cd-ai-broker.yml'
  workflow_dispatch:

env:
  GCP_REGION: us-central1
  GAR_REPO: veria
  SERVICE_NAME: ai-broker
  IMAGE_BASE: us-central1-docker.pkg.dev/veria-dev/veria/ai-broker

jobs:
  deploy:
    name: Build and Deploy AI Broker
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image metadata
        id: meta
        run: |
          SHA_TAG="${{ env.IMAGE_BASE }}:${GITHUB_SHA}"
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "tags=${SHA_TAG}" >> $GITHUB_OUTPUT

      - name: Create ai-broker specific Dockerfile
        run: |
          cat > services/ai-broker/Dockerfile << 'EOF'
          FROM node:20-alpine AS builder
          RUN corepack enable && corepack prepare pnpm@latest --activate
          WORKDIR /app

          # Copy package files
          COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
          COPY services/ai-broker/package.json ./services/ai-broker/

          # Install dependencies
          RUN pnpm install --frozen-lockfile --filter=ai-broker...

          # Copy source
          COPY services/ai-broker/ ./services/ai-broker/

          # Build
          RUN pnpm --filter=ai-broker build

          # Production stage
          FROM node:20-alpine
          RUN corepack enable && corepack prepare pnpm@latest --activate
          RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

          WORKDIR /app

          # Copy built application
          COPY --from=builder --chown=nodejs:nodejs /app/services/ai-broker/package.json ./
          COPY --from=builder --chown=nodejs:nodejs /app/services/ai-broker/dist ./dist
          COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

          USER nodejs
          ENV NODE_ENV=production
          ENV PORT=4001
          EXPOSE 4001

          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD node -e "require('http').get('http://localhost:4001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

          CMD ["node", "dist/index.js"]
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./services/ai-broker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(gcloud artifacts docker images describe "${{ steps.meta.outputs.sha_tag }}" \
            --format='get(image_summary.digest)')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "Image digest: ${DIGEST}"

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Deploy using the image digest for immutability
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image="${{ env.IMAGE_BASE }}@${{ steps.digest.outputs.digest }}" \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --port=4001 \
            --min-instances=0 \
            --max-instances=10 \
            --cpu=1 \
            --memory=512Mi \
            --timeout=60 \
            --concurrency=80 \
            --service-account=${{ secrets.GCP_SA_EMAIL }} \
            --no-allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --update-labels="commit-sha=${GITHUB_SHA},deployed-by=github-actions,service=ai-broker" \
            --format="value(status.url)"

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo ""
          echo "Service details:"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --format="yaml(status.url,status.latestReadyRevisionName,status.traffic)"

      - name: Output deployment summary
        run: |
          echo "## ðŸš€ AI Broker Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_BASE }}@${{ steps.digest.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${GITHUB_SHA}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Deployment successful!" >> $GITHUB_STEP_SUMMARY